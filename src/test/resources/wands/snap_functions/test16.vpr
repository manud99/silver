field f: Int
field g: Int

method test16a(xs: Seq[Ref], some: Ref, y: Ref)
    requires forall x: Ref :: x in xs ==> acc(x.f)
    requires some in xs && some.f == 0
    requires acc(y.f)
{
    package acc(y.f) --* acc(some.f)

    var completed: Seq[Ref] := Seq(some)
    assert forall z: Ref :: z in completed ==> acc(y.f) --* acc(z.f)

    apply acc(y.f) --* acc(some.f)
    assert some.f == 0
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method test16b(y: Ref)
    requires forall x: Ref :: acc(x.f) && acc(x.g)
    requires y.f == 42
    requires y.g > 0
{
    package (forall x: Ref :: acc(x.f) && acc(x.g)) --* acc(y.f) && acc(y.g)
    apply (forall x: Ref :: acc(x.f) && acc(x.g)) --* acc(y.f) && acc(y.g)

    assert y.f == 42
    assert y.g > 0
}
